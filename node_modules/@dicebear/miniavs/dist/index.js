'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var avatars = require('@dicebear/avatars');

var schema$1 = {
  "title": "Options",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "properties": {
    "head": {
      "title": "Head",
      "type": "array",
      "items": {
        "type": "string",
        "enum": ["normal", "wide", "thin"]
      },
      "default": ["normal", "wide", "thin"]
    },
    "body": {
      "title": "Body",
      "type": "array",
      "items": {
        "type": "string",
        "enum": ["tShirt", "golf"]
      },
      "default": ["tShirt", "golf"]
    },
    "hair": {
      "title": "Hair",
      "type": "array",
      "items": {
        "type": "string",
        "enum": ["balndess", "slaughter", "ponyTail", "long", "curly", "stylish", "elvis", "classic02", "classic01"]
      },
      "default": ["balndess", "slaughter", "ponyTail", "long", "curly", "stylish", "elvis", "classic02", "classic01"]
    },
    "mouth": {
      "title": "Mouth",
      "type": "array",
      "items": {
        "type": "string",
        "enum": ["default", "missingTooth"]
      },
      "default": ["default", "missingTooth"]
    },
    "eyes": {
      "title": "Eyes",
      "type": "array",
      "items": {
        "type": "string",
        "enum": ["normal", "confident", "happy"]
      },
      "default": ["normal", "confident", "happy"]
    },
    "glasses": {
      "title": "Glasses",
      "type": "array",
      "items": {
        "type": "string",
        "enum": ["normal"]
      },
      "default": ["normal"]
    },
    "glassesProbability": {
      "title": "Glasses Probability",
      "default": 20,
      "type": "integer",
      "minimum": 0,
      "maximum": 100
    },
    "mustache": {
      "title": "Mustache",
      "type": "array",
      "items": {
        "type": "string",
        "enum": ["pencilThinBeard", "pencilThin", "horshoe", "freddy"]
      },
      "default": ["pencilThinBeard", "pencilThin", "horshoe", "freddy"]
    },
    "mustacheProbability": {
      "title": "Mustache Probability",
      "default": 20,
      "type": "integer",
      "minimum": 0,
      "maximum": 100
    },
    "blushes": {
      "title": "Blushes",
      "type": "array",
      "items": {
        "type": "string",
        "enum": ["default"]
      },
      "default": ["default"]
    },
    "blushesProbability": {
      "title": "Blushes Probability",
      "default": 50,
      "type": "integer",
      "minimum": 0,
      "maximum": 100
    },
    "skinColor": {
      "title": "Skin Color",
      "type": "array",
      "items": {
        "anyOf": [{
          "type": "string",
          "enum": ["yellow", "white", "dark"]
        }, {
          "type": "string",
          "pattern": "^#([a-fA-F0-9]{3}|[a-fA-F0-9]{4}|[a-fA-F0-9]{6}|[a-fA-F0-9]{8})$"
        }]
      },
      "default": ["yellow", "white", "dark"]
    },
    "hairColor": {
      "title": "Hair Color",
      "type": "array",
      "items": {
        "anyOf": [{
          "type": "string",
          "enum": ["brown", "black", "red"]
        }, {
          "type": "string",
          "pattern": "^#([a-fA-F0-9]{3}|[a-fA-F0-9]{4}|[a-fA-F0-9]{6}|[a-fA-F0-9]{8})$"
        }]
      },
      "default": ["brown", "black", "red"]
    },
    "bodyColor": {
      "title": "Body Color",
      "type": "array",
      "items": {
        "anyOf": [{
          "type": "string",
          "enum": ["orange", "blue", "pink"]
        }, {
          "type": "string",
          "pattern": "^#([a-fA-F0-9]{3}|[a-fA-F0-9]{4}|[a-fA-F0-9]{6}|[a-fA-F0-9]{8})$"
        }]
      },
      "default": ["orange", "blue", "pink"]
    }
  },
  "additionalProperties": false
};

var head = {
  'normal': function normal(components, colors) {
    return "\n<path d=\"M45.887 36.1c0 8.5-1.257 18.859-10.887 19.82v9.95S31.357 68 26.5 68 18 64.523 18 64.523V42a5 5 0 0 1-1.303-9.829C15.36 22.643 17.51 13 32.002 13c14.587 0 14.235 11.08 13.957 19.815-.037 1.145-.072 2.25-.072 3.284Z\" fill=\"".concat(colors.skin.value, "\"/>\n<path d=\"M35 55.92c-.478.048-.978.072-1.498.072-8.883 0-13.9-7.153-15.502-14.605v23.135s3.643 3.477 8.5 3.477 8.5-2.13 8.5-2.13V55.92Z\" fill=\"#000\" fill-opacity=\".07\"/>\n<path d=\"M34.629 55.952c-.364.026-.74.04-1.128.04-6.53 0-10.97-3.866-13.501-8.875v.424l.001.695c0 5.385 2.614 9.75 8.276 9.75.484 0 .932.004 1.348.007 3.346.028 4.59.038 5.004-2.041ZM16.697 32.172A5.002 5.002 0 0 0 18 42c.047 0 .093 0 .14-.002a25.38 25.38 0 0 1-.71-5.898 46.698 46.698 0 0 1-.733-3.928Z\" fill=\"#000\" fill-opacity=\".07\"/>\n<rect x=\"36\" y=\"41\" width=\"3\" height=\"2\" rx=\"1\" fill=\"#000\" fill-opacity=\".07\"/>\n");
  },
  'wide': function wide(components, colors) {
    return "\n<path d=\"M46.07 40.409c.47 7.492.939 14.986-11.07 15.55v9.912S31.357 68 26.5 68 18 64.523 18 64.523V45.096a27.765 27.765 0 0 1-.412-3.113 5 5 0 0 1-.89-9.812C15.36 22.643 17.508 13 32.001 13c14.587 0 14.235 11.08 13.957 19.815-.037 1.145-.072 2.25-.072 3.284 0 1.403.091 2.856.183 4.31Z\" fill=\"".concat(colors.skin.value, "\"/>\n<path d=\"M17.588 41.984c-.158-1.97-.158-3.974-.158-5.884a46.698 46.698 0 0 1-.733-3.928 5.002 5.002 0 0 0 .89 9.812ZM18 45.094V64.52s3.643 3.477 8.5 3.477 8.5-2.13 8.5-2.13v-9.91c-.48.022-.979.033-1.498.033-10.792 0-14.337-4.946-15.502-10.897Z\" fill=\"#000\" fill-opacity=\".07\"/>\n<path d=\"M34.932 55.96c-.459.021-.935.032-1.43.032-7.248 0-11.227-2.231-13.412-5.5.503 4.823 3.162 8.493 8.293 8.493.49 0 .944.004 1.365.007 3.796.033 4.922.043 5.184-3.031Z\" fill=\"#000\" fill-opacity=\".07\"/>\n<rect x=\"36\" y=\"41\" width=\"3\" height=\"2\" rx=\"1\" fill=\"#000\" fill-opacity=\".07\"/>\n");
  },
  'thin': function thin(components, colors) {
    return "\n<path d=\"M45.887 36.1C45.887 45.021 42 55 35.5 56.5a14.512 14.512 0 0 1-.5-.062v9.433S31.357 68 26.5 68 18 64.523 18 64.523V42a5 5 0 0 1-1.303-9.829C15.36 22.643 17.51 13 32.002 13c14.587 0 14.235 11.08 13.957 19.815-.037 1.145-.072 2.25-.072 3.284Z\" fill=\"".concat(colors.skin.value, "\"/>\n<path d=\"M18 42.002v22.523s3.643 3.477 8.5 3.477 8.5-2.13 8.5-2.13V56.44c-7.26-1.02-13.894-7.502-16.454-14.467-.18.02-.361.03-.546.03Z\" fill=\"#000\" fill-opacity=\".07\"/>\n<path d=\"M16.697 32.172A5.002 5.002 0 0 0 18 42c.185 0 .367-.01.546-.03-.718-1.955-1.116-3.949-1.116-5.87a46.698 46.698 0 0 1-.733-3.928ZM34.696 56.392C27.951 55.3 21.79 49.53 19.001 43.105L19 43.5c0 5.654 6.267 14.474 9.383 15.487 2.568.835 5.397.657 6.313-2.594Z\" fill=\"#000\" fill-opacity=\".07\"/>\n<rect x=\"36\" y=\"41\" width=\"3\" height=\"2\" rx=\"1\" fill=\"#000\" fill-opacity=\".07\"/>\n");
  }
};

var body$1 = {
  'tShirt': function tShirt(components, colors) {
    return "\n<rect x=\"7\" y=\"60\" width=\"40\" height=\"23\" rx=\"9\" fill=\"".concat(colors.body.value, "\"/>\n");
  },
  'golf': function golf(components, colors) {
    return "\n<rect x=\"7\" y=\"60\" width=\"40\" height=\"23\" rx=\"9\" fill=\"".concat(colors.body.value, "\"/>\n<path d=\"M17 58h19v3s-5 1-9.5 1-9.5-1-9.5-1v-3Z\" fill=\"").concat(colors.body.value, "\"/>\n<path d=\"M17 58h19v2s-3 1.5-9.5 1.5S17 60 17 60v-2Z\" fill=\"#000\" fill-opacity=\".2\"/>\n<path d=\"M16.5 59a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2s-5 1-10 1-10-1-10-1Z\" fill=\"").concat(colors.body.value, "\"/>\n");
  }
};

var hair$1 = {
  'balndess': function balndess(components, colors) {
    return "\n<g fill=\"".concat(colors.hair.value, "\">\n<rect x=\"14\" y=\"26\" width=\"9\" height=\"2\" rx=\"1\"/>\n<rect x=\"14\" y=\"33\" width=\"7\" height=\"2\" rx=\"1\"/>\n<rect x=\"12\" y=\"29\" width=\"13\" height=\"3\" rx=\"1.5\"/>\n</g>\n");
  },
  'slaughter': function slaughter(components, colors) {
    return "\n<g fill=\"".concat(colors.hair.value, "\">\n<path d=\"M24 25c0 .53-.103 1.037-.29 1.5A4 4 0 0 1 20 32a4 4 0 0 1-8 0c0-1.046.065-2.782.368-4.321a4 4 0 0 1 4.801-5.505A4 4 0 0 1 24 25ZM45.849 33.895a4.002 4.002 0 0 0 2.785-5.393 4 4 0 0 0-3.134-5.459c.593 3.14.482 6.61.382 9.774l-.033 1.078Z\"/>\n</g>\n");
  },
  'ponyTail': function ponyTail(components, colors) {
    return "\n<path d=\"M0 10c7.997-7.997 13.002 3 13.002 3L11 21s-2 2.5 0 10-2.5 11.5-2.5 11.5-3.5 2.502-6.5.502c-3-2-3.397-3.922-3-7.5.5-4.5 2-3.002 2-7.502s-8.997-10.004-1-18Z\" fill=\"".concat(colors.hair.value, "\"/>\n<path d=\"m13.03 13.181 5.508 2.382-3.572 8.26-5.507-2.38s-.96-1.943.54-4.942c1.497-3 3.032-3.32 3.032-3.32Z\" fill=\"#FF6C98\"/>\n<path d=\"m18 41-1.323-8.823A5 5 0 0 0 18 42v8.3a22.137 22.137 0 0 1-4.083-4.83c-1.7-2.704-2.888-5.804-3.482-9.093a27.526 27.526 0 0 1 .04-9.97c.62-3.283 1.833-6.37 3.556-9.055 1.722-2.684 3.915-4.903 6.43-6.506 2.514-1.604 5.292-2.555 8.147-2.789a17.03 17.03 0 0 1 1.868-.05 20.422 20.422 0 0 1 7.795 1.325c2.305.88 4.4 2.169 6.164 3.794a17.48 17.48 0 0 1 4.119 5.677A16.378 16.378 0 0 1 49.93 24H50v4.286s-.329.152-.998.366v8.488s0 1.404-1.5 2.456c-.52.365-1.218.645-1.91.856a32.6 32.6 0 0 0 .297-4.353c0-1.034.035-2.139.071-3.284.036-1.118.073-2.275.08-3.441-1.852.339-4.367.626-7.578.626C30.614 30 26 28.286 26 28.286v-.999c-.68 1.064-1.416 2.35-2 3.713-.75 1.75-.75 3.544-.75 5.051 0 1.508 0 2.73-.75 3.335C21 40.596 18 41 18 41Z\" fill=\"").concat(colors.hair.value, "\"/>\n");
  },
  'long': function long(components, colors) {
    return "\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M48 25a18 18 0 0 0-35.993-.5H12V65h11V34.597c2.485-.478 6.78-1.53 12.208-3.756 5.464-2.241 8.873-4.359 10.668-5.637.242 2.524.158 5.16.08 7.61-.036 1.146-.071 2.25-.071 3.285 0 .408-.008.818-.025 1.229.231-.073.447-.153.639-.24 1.5-.684 1.5-1.597 1.5-1.597V25H48Zm-33 8a4.98 4.98 0 0 0-1.62 2.087A5 5 0 0 0 15 41v-8Z\" fill=\"".concat(colors.hair.value, "\"/>\n");
  },
  'curly': function curly(components, colors) {
    return "\n<g fill=\"".concat(colors.hair.value, "\">\n<path d=\"M45.967 32.483a3.999 3.999 0 0 0 1.78-4.884 4 4 0 0 0-2.966-7.41c1.418 3.674 1.314 8.218 1.186 12.294Z\"/>\n<path d=\"M36.297 22.76A4.981 4.981 0 0 1 33 24a4.978 4.978 0 0 1-3.057-1.043A6.978 6.978 0 0 1 25 25a6.999 6.999 0 0 1-2.045-.304 4.02 4.02 0 0 1-.892.731 4 4 0 0 1-1.351 6.189A1.5 1.5 0 0 1 19.465 34a4 4 0 0 1-7.291-3.17A3.987 3.987 0 0 1 11 28c0-1.106.449-2.107 1.174-2.83a4 4 0 0 1 .738-3.713 7.003 7.003 0 0 1 4.098-10.17 4 4 0 0 1 5.927-3.788A6.997 6.997 0 0 1 29 4c1.373 0 2.654.395 3.735 1.079a6.502 6.502 0 0 1 10.78 1.954 4 4 0 0 1 3.439 4.577C48.809 12.984 50 15.112 50 17.5c0 4.142-3.582 7.5-8 7.5-2.233 0-4.252-.858-5.703-2.24Z\"/>\n</g>\n");
  },
  'stylish': function stylish(components, colors) {
    return "\n<path d=\"M20.673 28.222v6.018c0 .762-.673 1.761-1.173 2.261-.5.5-2 1.5-2.85 1.5-.848 0-3.539-.451-4.826-2.257-1.287-1.805-.893-11.322 0-13.54.892-2.218 4.183-6.888 8.85-10.452 3.38-2.582 7.665-4.717 12.871-5.345C58.485 3.397 49.218 20.987 46 25.5c-5.5-2-9.5-2.5-16.717-1.518-7.217.983-8.016 1.982-8.61 4.239Z\" fill=\"".concat(colors.hair.value, "\"/>\n");
  },
  'elvis': function elvis(components, colors) {
    return "\n<path d=\"M21.998 28c-.629 3 1 6.982 1 7.744 0 .762-3.93 3.025-5 3.757-1.069.731-1.5-7-1.5-7-3 0-3.5 5.5-3.5 5.5s-2.244-.74-3-4.5c-.51-2.54.299-8.089.5-9.5.5-3.5 1-11.5 7.5-15.5s23-4 27-3c9.894 2.473 11.218 15.986 8 20.5-5 5.5-19-1-23.5-1s-6.87 0-7.5 3Z\" fill=\"".concat(colors.hair.value, "\"/>\n");
  },
  'classic02': function classic02(components, colors) {
    return "\n<path d=\"M28.118 27.466c7.796 1.142 21.48 3.147 22.882-9.464 1-9-12.5-19.5-27-10-9.11 1.35-11.389 8.278-11.908 14.254A3.986 3.986 0 0 0 11 25.002c0 .53.103 1.037.29 1.5-.187.463-.29.97-.29 1.5 0 1.106.449 2.106 1.174 2.83A4 4 0 1 0 20 32.002a4 4 0 0 0 3.874-4.999l.126-.001c.952 0 2.39.21 4.118.464Z\" fill=\"".concat(colors.hair.value, "\"/>\n");
  },
  'classic01': function classic01(components, colors) {
    return "\n<path d=\"M29.697 26.203c5.611 1.863 13.389 4.445 21.535-3.701 4-4-14-21-28.5-11.5-11.333 1.679-10.685 8.47-10.185 13.71.095 1.002.185 1.948.185 2.79 0 .533.07.931.2 1.218a26.48 26.48 0 0 0-.2 3.282 4 4 0 1 0 8 0A4 4 0 0 0 24.606 27l.126.002c1.224 0 2.32-.55 3.053-1.416.605.183 1.243.395 1.912.617Z\" fill=\"".concat(colors.hair.value, "\"/>\n");
  }
};

var mouth = {
  'default': function _default(components, colors) {
    return "\n<path d=\"M27.93 46a1 1 0 0 1 1-1h9.142a1 1 0 0 1 1 1 5 5 0 0 1-5 5H32.93a5 5 0 0 1-5-5Z\" fill=\"#66253C\"/>\n<path d=\"M35.756 50.708a4.992 4.992 0 0 1-1.684.29H32.93a5 5 0 0 1-4.996-4.8c.764-.285 1.898-.253 3.017-.22.356.01.71.02 1.05.02 2.21 0 4 1.568 4 3.5 0 .426-.087.833-.245 1.21Z\" fill=\"#B03E67\"/>\n<path d=\"M29 45h10v1a1 1 0 0 1-1 1h-8a1 1 0 0 1-1-1v-1Z\" fill=\"#fff\"/>\n";
  },
  'missingTooth': function missingTooth(components, colors) {
    return "\n<path d=\"M27.93 46a1 1 0 0 1 1-1h9.142a1 1 0 0 1 1 1 5 5 0 0 1-5 5H32.93a5 5 0 0 1-5-5Z\" fill=\"#66253C\"/>\n<path d=\"M35.756 50.708a4.992 4.992 0 0 1-1.684.29H32.93a5 5 0 0 1-4.996-4.8c.764-.285 1.898-.253 3.017-.22.356.01.71.02 1.05.02 2.21 0 4 1.568 4 3.5 0 .426-.087.833-.245 1.21Z\" fill=\"#B03E67\"/>\n<path d=\"M29 45h10v1a1 1 0 0 1-1 1h-8a1 1 0 0 1-1-1v-1Z\" fill=\"#fff\"/>\n<path d=\"M31 45.3a.3.3 0 0 1 .3-.3h1.4a.3.3 0 0 1 .3.3v2.4a.3.3 0 0 1-.3.3h-1.4a.3.3 0 0 1-.3-.3v-2.4Z\" fill=\"#B03E67\"/>\n";
  }
};

var eyes = {
  'normal': function normal(components, colors) {
    var _components$blushes$v, _components$blushes;

    return "\n<g fill=\"".concat(colors.hair.value, "\">\n<rect x=\"30\" y=\"36\" width=\"3\" height=\"4\" rx=\"1.5\"/>\n<rect x=\"40\" y=\"36\" width=\"3\" height=\"4\" rx=\"1.5\"/>\n</g>\n<g>\n").concat((_components$blushes$v = (_components$blushes = components.blushes) === null || _components$blushes === void 0 ? void 0 : _components$blushes.value(components, colors)) !== null && _components$blushes$v !== void 0 ? _components$blushes$v : '', "\n</g>\n");
  },
  'confident': function confident(components, colors) {
    var _components$blushes$v2, _components$blushes2;

    return "\n<g>\n".concat((_components$blushes$v2 = (_components$blushes2 = components.blushes) === null || _components$blushes2 === void 0 ? void 0 : _components$blushes2.value(components, colors)) !== null && _components$blushes$v2 !== void 0 ? _components$blushes$v2 : '', "\n</g>\n<path d=\"M43 37.5a1.5 1.5 0 0 1-3 0v-1.227c0-.15.122-.273.273-.273h2.454c.15 0 .273.122.273.273V37.5ZM33 37.5a1.5 1.5 0 0 1-3 0v-1.227c0-.15.122-.273.273-.273h2.454c.15 0 .273.122.273.273V37.5Z\" fill=\"").concat(colors.hair.value, "\"/>\n<path stroke=\"").concat(colors.hair.value, "\" stroke-linecap=\"round\" d=\"M29.5 36.5h4M39.5 36.5h4\"/>\n");
  },
  'happy': function happy(components, colors) {
    var _components$blushes$v3, _components$blushes3;

    return "\n<g>\n".concat((_components$blushes$v3 = (_components$blushes3 = components.blushes) === null || _components$blushes3 === void 0 ? void 0 : _components$blushes3.value(components, colors)) !== null && _components$blushes$v3 !== void 0 ? _components$blushes$v3 : '', "\n</g>\n<g fill=\"#1B0B47\">\n<path d=\"M30 37.5a1.5 1.5 0 0 1 3 0v1.227c0 .15-.122.273-.273.273h-2.454a.273.273 0 0 1-.273-.273V37.5ZM40 37.5a1.5 1.5 0 0 1 3 0v1.227c0 .15-.122.273-.273.273h-2.454a.273.273 0 0 1-.273-.273V37.5Z\"/>\n</g>\n");
  }
};

var glasses = {
  'normal': function normal(components, colors) {
    return "\n<g stroke=\"#000\" stroke-width=\"2\">\n<circle cx=\"30.269\" cy=\"36.269\" r=\"4.269\"/>\n<circle cx=\"44.269\" cy=\"36.269\" r=\"4.269\"/>\n<path d=\"m33.985 35.106 7-.104\"/>\n</g>\n";
  }
};

var mustache = {
  'pencilThinBeard': function pencilThinBeard(components, colors) {
    return "\n<g fill=\"".concat(colors.hair.value, "\">\n<path d=\"M26.5 45s4.5-.5 11-2v2c-1.5.667-5.5 1.6-7.5 2-2.5.5-3.5-2-3.5-2ZM48 44.756S44 44 38 43v2c1.429.585 4.595 1.149 6.5 1.5 2.381.439 3.5-1.744 3.5-1.744ZM33.31 55.242A1 1 0 0 1 34.28 54h3.44a1 1 0 0 1 .97 1.242l-.25 1a1 1 0 0 1-.97.758h-2.94a1 1 0 0 1-.97-.758l-.25-1Z\"/>\n</g>\n");
  },
  'pencilThin': function pencilThin(components, colors) {
    return "\n<g fill=\"#1B0B47\">\n<path d=\"M37.5 43c-6.5 1.5-11 2-11 2s1 2.5 3.5 2c2-.4 6-1.333 7.5-2v-2ZM38 43c6 1 10 1.756 10 1.756s-1.119 2.183-3.5 1.744l-.32-.059C42.256 46.088 39.35 45.553 38 45v-2Z\"/>\n</g>\n";
  },
  'horshoe': function horshoe(components, colors) {
    return "\n<path d=\"M27 46a3 3 0 0 1 3-3h11a3 3 0 0 1 3 3v11a4 4 0 0 1-4-4v-7h-9v7a4 4 0 0 1-4 4V46Z\" fill=\"".concat(colors.hair.value, "\"/>\n");
  },
  'freddy': function freddy(components, colors) {
    return "\n<path d=\"M28 46a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3H28Z\" fill=\"".concat(colors.hair.value, "\"/>\n");
  }
};

var blushes = {
  'default': function _default(components, colors) {
    return "\n<g fill=\"#FF859B\">\n<rect x=\"24\" y=\"39\" width=\"5\" height=\"3\" rx=\"1.5\"/>\n<rect x=\"43\" y=\"39\" width=\"4\" height=\"3\" rx=\"1.5\"/>\n</g>\n";
  }
};

var components = /*#__PURE__*/Object.freeze({
  __proto__: null,
  head: head,
  body: body$1,
  hair: hair$1,
  mouth: mouth,
  eyes: eyes,
  glasses: glasses,
  mustache: mustache,
  blushes: blushes
});

function pickComponent(prng, group) {
  var values = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var componentCollection = components;
  var key = prng.pick(values);

  if (componentCollection[group][key]) {
    return {
      name: key,
      value: componentCollection[group][key]
    };
  } else {
    return undefined;
  }
}

var skin = {
  'yellow': 'rgba(255, 203, 126, 1)',
  'white': 'rgba(245, 208, 197, 1)',
  'dark': 'rgba(131, 96, 85, 1)'
};

var hair = {
  'brown': 'rgba(71, 40, 11, 1)',
  'black': 'rgba(27, 11, 71, 1)',
  'red': 'rgba(173, 58, 32, 1)'
};

var body = {
  'orange': 'rgba(224, 90, 51, 1)',
  'blue': 'rgba(54, 51, 224, 1)',
  'pink': 'rgba(255, 77, 216, 1)'
};

var colors = /*#__PURE__*/Object.freeze({
  __proto__: null,
  skin: skin,
  hair: hair,
  body: body
});

function pickColor(prng, group, values) {
  var _colorCollection$grou;

  var colorCollection = colors;

  if (values.length === 0) {
    values.push('transparent');
  }

  var key = prng.pick(values);
  return {
    name: key,
    value: (_colorCollection$grou = colorCollection[group][key]) !== null && _colorCollection$grou !== void 0 ? _colorCollection$grou : key
  };
}

function onPreCreate(_ref) {// Write your modifications here

  _ref.prng;
      _ref.options;
}

function onPostCreate(_ref) {// Write your modifications here

  _ref.prng;
      _ref.options;
      _ref.components;
      _ref.colors;
}

var style = {
  meta: {
    title: 'Miniavs - Free Avatar Creator',
    creator: 'Webpixels',
    source: 'https://www.figma.com/community/file/923211396597067458',
    license: {
      name: 'CC BY 4.0',
      url: 'https://creativecommons.org/licenses/by/4.0/'
    }
  },
  schema: schema$1,
  create: function create(_ref) {
    var _options$skinColor, _options$hairColor, _options$bodyColor, _components$head$valu, _components$head, _components$body$valu, _components$body, _components$hair$valu, _components$hair, _components$mouth$val, _components$mouth, _components$eyes$valu, _components$eyes, _components$glasses$v, _components$glasses, _components$mustache$, _components$mustache;

    var prng = _ref.prng,
        options = _ref.options;
    onPreCreate({
      prng: prng,
      options: options
    });
    var headComponent = pickComponent(prng, 'head', options.head);
    var bodyComponent = pickComponent(prng, 'body', options.body);
    var hairComponent = pickComponent(prng, 'hair', options.hair);
    var mouthComponent = pickComponent(prng, 'mouth', options.mouth);
    var eyesComponent = pickComponent(prng, 'eyes', options.eyes);
    var glassesComponent = pickComponent(prng, 'glasses', options.glasses);
    var mustacheComponent = pickComponent(prng, 'mustache', options.mustache);
    var blushesComponent = pickComponent(prng, 'blushes', options.blushes);
    var components = {
      'head': headComponent,
      'body': bodyComponent,
      'hair': hairComponent,
      'mouth': mouthComponent,
      'eyes': eyesComponent,
      'glasses': prng.bool(options.glassesProbability) ? glassesComponent : undefined,
      'mustache': prng.bool(options.mustacheProbability) ? mustacheComponent : undefined,
      'blushes': prng.bool(options.blushesProbability) ? blushesComponent : undefined
    };
    var colors = {
      'skin': pickColor(prng, 'skin', (_options$skinColor = options.skinColor) !== null && _options$skinColor !== void 0 ? _options$skinColor : []),
      'hair': pickColor(prng, 'hair', (_options$hairColor = options.hairColor) !== null && _options$hairColor !== void 0 ? _options$hairColor : []),
      'body': pickColor(prng, 'body', (_options$bodyColor = options.bodyColor) !== null && _options$bodyColor !== void 0 ? _options$bodyColor : [])
    };
    onPostCreate({
      prng: prng,
      options: options,
      components: components,
      colors: colors
    });
    return {
      attributes: {
        viewBox: '0 0 64 64',
        fill: 'none'
      },
      body: "\n<g>\n".concat((_components$head$valu = (_components$head = components.head) === null || _components$head === void 0 ? void 0 : _components$head.value(components, colors)) !== null && _components$head$valu !== void 0 ? _components$head$valu : '', "\n</g>\n<g>\n").concat((_components$body$valu = (_components$body = components.body) === null || _components$body === void 0 ? void 0 : _components$body.value(components, colors)) !== null && _components$body$valu !== void 0 ? _components$body$valu : '', "\n</g>\n<g>\n").concat((_components$hair$valu = (_components$hair = components.hair) === null || _components$hair === void 0 ? void 0 : _components$hair.value(components, colors)) !== null && _components$hair$valu !== void 0 ? _components$hair$valu : '', "\n</g>\n<g transform=\"translate(1)\">\n").concat((_components$mouth$val = (_components$mouth = components.mouth) === null || _components$mouth === void 0 ? void 0 : _components$mouth.value(components, colors)) !== null && _components$mouth$val !== void 0 ? _components$mouth$val : '', "\n</g>\n<g transform=\"translate(0 -1)\">\n").concat((_components$eyes$valu = (_components$eyes = components.eyes) === null || _components$eyes === void 0 ? void 0 : _components$eyes.value(components, colors)) !== null && _components$eyes$valu !== void 0 ? _components$eyes$valu : '', "\n</g>\n<g>\n").concat((_components$glasses$v = (_components$glasses = components.glasses) === null || _components$glasses === void 0 ? void 0 : _components$glasses.value(components, colors)) !== null && _components$glasses$v !== void 0 ? _components$glasses$v : '', "\n</g>\n<g>\n").concat((_components$mustache$ = (_components$mustache = components.mustache) === null || _components$mustache === void 0 ? void 0 : _components$mustache.value(components, colors)) !== null && _components$mustache$ !== void 0 ? _components$mustache$ : '', "\n</g>\n")
    };
  }
};

/*!
 * Miniavs - Free Avatar Creator (@dicebear/miniavs)
 *
 * Code licensed under MIT License.
 * Copyright (c) 2021 Florian Körner
 *
 * Design "Miniavs - Free Avatar Creator" by Webpixels licensed under CC BY 4.0.
 * Source: https://www.figma.com/community/file/923211396597067458
 * License: https://creativecommons.org/licenses/by/4.0/
 */
var create = style.create,
    meta = style.meta,
    schema = style.schema;
/** @deprecated will be removed in Version 5.0 */

var index = avatars.utils.style.createLegacyWrapper(style);

exports.create = create;
exports["default"] = index;
exports.meta = meta;
exports.schema = schema;
